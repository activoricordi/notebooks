FROM python:3.8-slim-buster AS compile-image

## set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV VIRTUAL_ENV=/opt/venv

RUN DEBIAN_FRONTEND=noninteractive apt-get update --fix-missing && \
    apt-get install -y --no-install-recommends sudo apt-utils && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
        # This is necessary for apt to access HTTPS sources:
        apt-transport-https \
        # Compiler libraries
        netcat-openbsd  \
        gfortran \
        pkg-config \
        liblapack-dev \
        libfreetype6-dev \
        libpq-dev \
        libpng-dev \
        libffi-dev \
        g++ \
        gcc  \
        make \
        python3-dev \
        python3-venv \
        python3-pip \
        # python3-psycopg2 is the package name for python 3
        python3-psycopg2 \
        build-essential && \
        rm -rf /var/lib/apt/lists/* && \
        apt-get clean

RUN DEBIAN_FRONTEND=noninteractive apt-get update -yq \
    && apt-get install curl gnupg -yq \
    && curl -sL https://deb.nodesource.com/setup_14.x | bash \
    && apt-get install nodejs -yq \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

RUN python3 -m venv $VIRTUAL_ENV
# Make sure we use the virtualenv:
ENV PATH="$VIRTUAL_ENV/bin:/usr/bin/node:/usr/bin/npm:$PATH"

# Check Node is installed
RUN echo "NODE Version:" && node --version && which node && echo "NPM Version:" && npm --version && which npm

COPY ./requirements.txt .
COPY ./install_jupyter_extensions.sh /usr/local/bin/
COPY ./extensions.txt /usr/local/bin/

# Setup python language
ENV LANG en_us.UTF-8
ENV LC_TYPE en_US.UTF-8

# Pip3 Install Requirements
RUN pip3 install --upgrade pip && \
    pip3 install -r requirements.txt

RUN chmod 777 /usr/local/bin/install_jupyter_extensions.sh && ln -s /usr/local/bin/install_jupyter_extensions.sh
RUN /usr/local/bin/install_jupyter_extensions.sh

# Clean up
RUN apt-get update && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

FROM python:3.8-slim-buster AS build-image

ENV VIRTUAL_ENV=/opt/venv

COPY --from=compile-image $VIRTUAL_ENV $VIRTUAL_ENV
COPY --from=compile-image /usr/bin/node /usr/bin/node
COPY --from=compile-image /usr/bin/npm /usr/bin/node

# Make sure we use the venv, node and npm:
ENV PATH="$VIRTUAL_ENV/bin:/usr/bin/node:/usr/bin/npm:$PATH"

# Expose Jupyterlab default port
EXPOSE 8888

# Expose notebooks
VOLUME /workspace

# Working directory notebooks
WORKDIR /workspace

COPY bin/entrypoint.sh /usr/local/bin/
RUN chmod 777 /usr/local/bin/entrypoint.sh && ln -s /usr/local/bin/entrypoint.sh

# Entrypoint
ENTRYPOINT ["entrypoint.sh"]